//
// TokensAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire
import RxSwift



open class TokensAPI: APIBase {
    /**

     - parameter clientId: (query)  
     - parameter clientSecret: (query)  
     - parameter code: (query)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func accessTokensPost(clientId: String, clientSecret: String, code: String, completion: @escaping ((_ data: Token?,_ error: Error?) -> Void)) {
        accessTokensPostWithRequestBuilder(clientId: clientId, clientSecret: clientSecret, code: code).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**

     - parameter clientId: (query)  
     - parameter clientSecret: (query)  
     - parameter code: (query)  
     - returns: Observable<Token>
     */
    open class func accessTokensPost(clientId: String, clientSecret: String, code: String) -> Observable<Token> {
        return Observable.create { observer -> Disposable in
            accessTokensPost(clientId: clientId, clientSecret: clientSecret, code: code) { data, error in
                if let error = error {
                    observer.on(.error(error as Error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     - POST /access_tokens
     - examples: [{example={
  "scopes" : [ "aeiou" ],
  "token" : "aeiou",
  "client_id" : "aeiou"
}, contentType=application/json}]
     
     - parameter clientId: (query)  
     - parameter clientSecret: (query)  
     - parameter code: (query)  

     - returns: RequestBuilder<Token> 
     */
    open class func accessTokensPostWithRequestBuilder(clientId: String, clientSecret: String, code: String) -> RequestBuilder<Token> {
        let path = "/access_tokens"
        let URLString = CHQiitaApiClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "client_id": clientId, 
            "client_secret": clientSecret, 
            "code": code
        ])
        

        let requestBuilder: RequestBuilder<Token>.Type = CHQiitaApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
